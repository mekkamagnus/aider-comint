:PROPERTIES:
:ID:       D84F58F0-D387-4B6F-94EF-4A24B015CF8D
:END:
#+title: aider-comint package for Emacs README
#+description: An Emacs comint for Aider chat

* Overview
The Aider-Comint package provides an enhanced interaction with the Comint mode in Emacs, allowing for more efficient and productive Aider command-line sessions within the EMACS.

* Features
- Seamlessly integrates with existing Comint buffers.
- Provides enhanced auto-completion for commands.
- Supports custom command history navigation.
- Allows for syntax highlighting of command outputs.
- Configurable shortcuts for frequently used commands.

* Installation
You can install the Aider-Comint package via MELPA using the following steps:

1. Add MELPA to your package archives if you haven't already:

   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (add-to-list 'package-archives
                '("melpa" . "https://melpa.org/packages/") t)
   (package-initialize)
   #+END_SRC

2. Install Aider-Comint:

   #+BEGIN_SRC emacs-lisp
   (package-refresh-contents)
   (package-install 'aider-comint)
   #+END_SRC

* Usage
To start using Aider-Comint, simply open a Comint buffer (e.g., Shell, Python shell) and enjoy the enhanced features. You can customize settings via:

   M-x customize-group RET aider-comint RET

* Slash Commands

| Command         | Description                                                                 |
|-----------------+-----------------------------------------------------------------------------|
| /add            | Add files to the chat so aider can edit them or review them in detail       |
| /architect      | Enter architect/editor mode using 2 different models                        |
| /ask            | Ask questions about the code base without editing any files                 |
| /chat-mode      | Switch to a new chat mode                                                   |
| /clear          | Clear the chat history                                                      |
| /code           | Ask for changes to your code                                                |
| /commit         | Commit edits to the repo made outside the chat (commit message optional)    |
| /copy           | Copy the last assistant message to the clipboard                            |
| /copy-context   | Copy the current chat context as markdown, suitable to paste into a web UI  |
| /diff           | Display the diff of changes since the last message                          |
| /drop           | Remove files from the chat session to free up context space                 |
| /editor         | Open an editor to write a prompt                                            |
| /exit           | Exit the application                                                        |
| /git            | Run a git command (output excluded from chat)                               |
| /help           | Ask questions about aider                                                   |
| /lint           | Lint and fix in-chat files or all dirty files if none in chat               |
| /load           | Load and execute commands from a file                                       |
| /ls             | List all known files and indicate which are included in the chat session    |
| /map            | Print out the current repository map                                        |
| /map-refresh    | Force a refresh of the repository map                                       |
| /model          | Switch to a new LLM                                                         |
| /models         | Search the list of available models                                         |
| /multiline-mode | Toggle multiline mode (swaps behavior of Enter and Meta+Enter)              |
| /paste          | Paste image/text from the clipboard into the chat                           |
| /quit           | Exit the application                                                        |
| /read-only      | Add files for reference only or turn added files to read-only               |
| /report         | Report a problem by opening a GitHub Issue                                  |
| /reset          | Drop all files and clear the chat history                                   |
| /run            | Run a shell command and optionally add the output to the chat (alias: !)    |
| /save           | Save commands to reconstruct the current chat session's files               |
| /settings       | Print out the current settings                                              |
| /test           | Run a shell command and add output to chat on non-zero exit code            |
| /tokens         | Report on the number of tokens used by the current chat context             |
| /undo           | Undo the last git commit if it was done by aider                            |
| /voice          | Record and transcribe voice input                                           |
| /web            | Scrape a webpage, convert to markdown and send in a message                 |

* Configuration
You can configure Aider-Comint by adding the following to your Emacs configuration:

   #+BEGIN_SRC emacs-lisp
   (setq aider-comint-custom-setting t)
   #+END_SRC

* Contributing
Contributions are welcome! Please feel free to submit issues or pull requests on the GitHub repository.

* License
This project is licensed under the MIT License. See the LICENSE file for more details.


* API Reference

** Core Functions
- aider-comint-send-command :: Send commands to comint buffer
- aider-comint-process-output :: Handle command output
- aider-comint-parse-response :: Parse command responses

** Utility Functions
- aider-comint-validate-input :: Validate user input
- aider-comint-format-output :: Format output for display
- aider-comint-history-management :: Manage command history

* Roadmap

** Short-term Goals
- [ ] Implement basic command handling
- [ ] Add output formatting
- [ ] Create test suite

** Medium-term Goals
- [ ] Add command history management
- [ ] Implement auto-completion
- [ ] Add syntax highlighting

** Long-term Goals
- [ ] Support multiple comint buffers
- [ ] Add plugin system
- [ ] Create package documentation

* Debugging

** Common Issues
- Command not recognized
- Output formatting errors
- History management problems

** Debugging Tools
- Use =M-x toggle-debug-on-error=
- Check *Messages* buffer
- Use =edebug= for step-by-step debugging

* Acknowledgements
Thanks to the Emacs community for their continuous support and contributions.

